@layout AdminLayout
@page "/admin/persyaratan"

@attribute [Authorize(Roles = "Admin")]
<div class="m-4">
    <div class="card">
        <div style=" display:flex;justify-content:space-between; align-items:center">
            <h5 class="card-header">Data Persyaratan</h5>
            <div>
                <button @onclick="OnShowModalClick" class="btn btn-primary m-3">Add</button>
            </div>
        </div>
        <div class="table-responsive text-nowrap">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Nama Persyaratan</th>
                        <th>Photo</th>
                        <th>Keterangan</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody class="table-border-bottom-0">

                    @if (persyaratans != null)
                    {
                        @foreach (var item in persyaratans)
                        {
                            <tr>
                                <td><i class="fab fa-angular fa-lg text-danger me-3"></i> <strong>Angular Project</strong></td>
                                <td>Albert Cook</td>
                                <td>
                                    <ul class="list-unstyled users-list m-0 avatar-group d-flex align-items-center">
                                        <li data-bs-toggle="tooltip"
                                            data-popup="tooltip-custom"
                                            data-bs-placement="top"
                                            class="avatar avatar-xs pull-up"
                                            title="Lilian Fuller">
                                            <img src="../assets/img/avatars/5.png" alt="Avatar" class="rounded-circle" />
                                        </li>
                                        <li data-bs-toggle="tooltip"
                                            data-popup="tooltip-custom"
                                            data-bs-placement="top"
                                            class="avatar avatar-xs pull-up"
                                            title="Sophia Wilkerson">
                                            <img src="../assets/img/avatars/6.png" alt="Avatar" class="rounded-circle" />
                                        </li>
                                        <li data-bs-toggle="tooltip"
                                            data-popup="tooltip-custom"
                                            data-bs-placement="top"
                                            class="avatar avatar-xs pull-up"
                                            title="Christina Parker">
                                            <img src="../assets/img/avatars/7.png" alt="Avatar" class="rounded-circle" />
                                        </li>
                                    </ul>
                                </td>
                                <td><span class="badge bg-label-primary me-1">Active</span></td>
                                <td>
                                    <div class="dropdown">
                                        <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                            <i class="bx bx-dots-vertical-rounded"></i>
                                        </button>
                                        <div class="dropdown-menu">
                                            <a class="dropdown-item" href="javascript:void(0);"><i class="bx bx-edit-alt me-1"></i> Edit</a>
                                            <a class="dropdown-item" href="javascript:void(0);"><i class="bx bx-trash me-1"></i> Delete</a>
                                        </div>
                                    </div>
                                </td>
                            </tr>

                        }
                    }


                </tbody>
            </table>
        </div>
    </div>
</div>

<Modal @ref="modal" Title="TambahEdit" IsVerticallyCentered=true>
    <BodyTemplate>
        <EditForm Model="@model" OnValidSubmit="SaveAction">
            <Morris.Blazor.Validation.Validate ValidationProperties=@(ValidationProperties.Set.FluentValidator<PersyaratanValidator>()) />
            <div class="mb-3">
                <label for="email" class="form-label">Nama Persyaratan</label>
                <InputText type="text" @bind-Value="model.Nama" class="form-control"></InputText>
                <ValidationMessage For="@(() => model.Nama)" />

            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Keterangan</label>
                <InputTextArea type="text" @bind-Value="model.Keterangan" class="form-control"></InputTextArea>
                <ValidationMessage For="@(() => model.Keterangan)" />
            </div>
            <div class="mb-3">
                <div class="form-check">
                    <InputCheckbox @bind-Value="model.IsPhoto"></InputCheckbox>
                    <label class="form-check-label" > Photo </label>
                </div>
            </div>
            <div class="mb-3" style="display:flex;justify-content:end; gap:2px">
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Save changes</Button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

@inject HttpClient httpClient
@inject ILocalStorageService localService

@code {

    ICollection<Persyaratan> persyaratans;
    Persyaratan model = new Persyaratan();
    private Modal modal;

    //  List<ToastMessage> messages = new List<ToastMessage>();


    protected override async Task OnInitializedAsync()
    {
        await httpClient.SetToken(localService);
        var response = await httpClient.GetAsync("api/persyaratan");

        if (response.IsSuccessStatusCode)
        {
            persyaratans = (await response.GetResult<IEnumerable<Persyaratan>>()).ToList();
        }
    }


    async Task SaveAction()
    {
        try
        {
            if (model.Id <= 0)
            {
                var httpResponse = await httpClient.PostAsJsonAsync<Persyaratan>("api/persyaratan", model);
                if (httpResponse.IsSuccessStatusCode)
                {
                    var result = await httpResponse.GetResult<Persyaratan>();
                    if (result == null)
                        throw new SystemException("Data tidak berhasil disimpan !");

                    persyaratans.Add(result);
                    return;
                }

                  throw new SystemException( await  httpResponse.Error());

            }
            else
            {
                var httpResponse = await httpClient.PutAsJsonAsync<Persyaratan>("api/persyaratan", model);
                if (httpResponse.IsSuccessStatusCode)
                {
                    var result = await httpResponse.GetResult<Persyaratan>();
                    if (result == null)
                        throw new SystemException("Data tidak berhasil diubah !");
                    return;
                }

                throw new SystemException(await httpResponse.Error());
            }
        }
        catch (Exception ex)
        {
            await ToasMessage.ShowMessage(ex.Message, ToastType.Danger, "Error");
            StateHasChanged();
        }
    }

    private async Task OnShowModalClick()
    {
        model = new Persyaratan();
        await modal?.ShowAsync();
    }
    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }



}