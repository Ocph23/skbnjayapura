@layout AdminLayout
@page "/admin/skbn"

@attribute [Authorize(Roles = "Admin")]

<div class="noprint container-xxl flex-grow-1 container-p-y">
    <div class="card">
        <div style=" display:flex;justify-content:space-between; align-items:center">
            <h5 class="card-header">Data SKBN</h5>
            <div class="d-flex justify-content-center align-items-center m-2">
                <input type="date" class="form-control" placeholder="Mulai" @onchange="@OnStartChange" />
                <label class="m-2">s/d</label>
                <input type="date" class="form-control" placeholder="Selesai" @onchange="@OnEndChange" />
                <a style="width:60px; color:forestgreen;" class="dropdown-item" @onclick="@(()=>PrintLaporanAction())"><i class="bx bx-printer me-1"></i></a>
            </div>
        </div>
        <table class="table mt-5">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Nomor SKBN</th>
                    <th>Pemohon</th>
                    <th>Keperluan</th>
                    <th>Berlaku</th>
                    <th>Ditetapkan</th>
                    <th>Diambil</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody class="table-border-bottom-0">

                @if (permohonan != null)
                {
                    @foreach (var item in permohonan.Select((data, index) => new { data, index }))
                    {
                        <tr>
                            <td>@(item.index + 1)</td>
                            <td>@item.data.Nomor</td>
                            <td>@item.data.Profile.Nama</td>
                            <td>@item.data.Keperluan</td>
                            <td>@($"{item.data.Mulai.ToString("dd/MM/yyyy")} - {item.data.Selesai.ToString("dd/MM/yyyy")}")</td>
                            <td>@($"{item.data.TanggalPenetapan.ToString("dd/MM/yyyy")}")</td>
                            <td>@(string.IsNullOrEmpty(item.data.DiambilOleh) ? "Belum" : "Sudah")</td>
                            <td>
                                <div class="dropdown" style="position:inherit !important">
                                    <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                        <i class="bx bx-dots-vertical-rounded"></i>
                                    </button>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item" @onclick="@(()=>PrintAction(item.data))"><i class="bx bx-printer me-1"></i> Cetak</a>
                                        <a class="dropdown-item" @onclick="@(()=> EditAction(item.data))"><i class="bx bx-edit-alt me-1"></i> Pengambilan</a>
                                    </div>
                                </div>
                            </td>
                        </tr>

                    }
                }
            </tbody>
        </table>
    </div>
</div>

<Modal @ref="modal" Title="Pengambilan" IsVerticallyCentered=true>
    <BodyTemplate>
        <EditForm Model="@pengambilan" OnValidSubmit="SaveAction">
            <Morris.Blazor.Validation.Validate ValidationProperties=@(ValidationProperties.Set.FluentValidator<PengambilanValidator>()) />
            <div class="mb-3">
                <label for="email" class="form-label">Diambil Oleh </label>
                <InputText type="text" @bind-Value="pengambilan.Nama" class="form-control"></InputText>
                <ValidationMessage For="@(() => pengambilan.Nama)" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Tanggal</label>
                <InputDate @bind-Value="pengambilan.Tanggal" class="form-control"></InputDate>
                <ValidationMessage For="@(() => pengambilan.Tanggal)" />
            </div>
            <div class="mb-3" style="display:flex;justify-content:end; gap:2px">
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Save</Button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

<ConfirmDialog @ref="confirmDialog" />

@if (laporan)
{
<CetakLaporannSKBN Data="permohonan" StartDate="@startDate" EndDate="@endDate"></CetakLaporannSKBN>

}
else
{
<CetakSKBN model="@model"></CetakSKBN>
}





@inject HttpClient httpClient
@inject ILocalStorageService localService
@inject IJSRuntime JS

@code {
    [Inject] protected ToastService ToastService { get; set; }
    ICollection<SKBNModel> permohonan;
    ICollection<SKBNModel> source;
    SKBNModel model;
    Pengambilan pengambilan;
    private Modal modal;
    private ConfirmDialog confirmDialog;

    DateTime? startDate;
    DateTime? endDate;
    bool laporan;


    async Task PrintLaporanAction()
    {
        laporan = true;
        StateHasChanged();
        await Task.Delay(500);
        await JS.InvokeVoidAsync("window.print");
    }

    async Task OnStartChange(ChangeEventArgs args)
    {
        try
        {
            startDate = Convert.ToDateTime(args.Value);
            await OnDateChange(startDate, endDate);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "Error", ex.Message));
        }
    }

    async Task OnEndChange(ChangeEventArgs args)
    {
        try
        {
            endDate = Convert.ToDateTime(args.Value);
            await OnDateChange(startDate, endDate);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "Error", ex.Message));
        }
    }

    Task OnDateChange(DateTime? startDateX, DateTime? endDateX)
    {
        try
        {
            IEnumerable<SKBNModel> datas = new List<SKBNModel>();

            if (startDateX != null)
                datas = source.Where(x => x.TanggalPenetapan >= startDateX.Value).AsEnumerable();

            if (endDateX != null)
            {
                if (endDateX < startDateX)
                    throw new Exception("Tanggal Mulai Harus Lebih Besar !");

                datas = source.Where(x => x.TanggalPenetapan >= startDateX.Value && x.TanggalPenetapan <= endDateX.Value).AsEnumerable();
            }

            permohonan = datas.ToList();

        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "Error", ex.Message));
        }

        return Task.CompletedTask;
    }


    protected override async Task OnInitializedAsync()
    {
        await httpClient.SetToken(localService);
        var response = await httpClient.GetAsync("api/permohonan/skbn");

        if (response.IsSuccessStatusCode)
        {
            source = (await response.GetResult<IEnumerable<SKBNModel>>()).ToList();
        }
    }

    async Task EditAction(SKBNModel data)
    {
        pengambilan = new Pengambilan { Id = data.Id, Nama = data.DiambilOleh, Tanggal = data.TanggalPengambilan == null ? DateTime.Now : data.TanggalPengambilan.Value };
        await modal.ShowAsync();
    }

    async Task SaveAction()
    {

        try
        {
            var httpResponse = await httpClient.PostAsJsonAsync<Pengambilan>("api/permohonan/pengambilan", pengambilan);
            if (httpResponse.IsSuccessStatusCode)
            {
                var result = await httpResponse.GetResult<Persyaratan>();
                if (result == null)
                    throw new SystemException("Data tidak berhasil disimpan !");
                var dataToSave = model with { DiambilOleh = pengambilan.Nama!, TanggalPengambilan = pengambilan.Tanggal };
                ToastService.Notify(new ToastMessage(ToastType.Success, "Success", "Berhasil !"));
                await modal.HideAsync();
                return;
            }

            throw new SystemException(await httpResponse.Error());
        }
        catch (Exception ex)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "Error", ex.Message));
        }
    }

    async Task PrintAction(SKBNModel value)
    {
        laporan = false;
        model = value;
        StateHasChanged();
        await Task.Delay(500);
        await JS.InvokeVoidAsync("window.print");
    }

    private async Task OnShowModalClick()
    {
        await modal?.ShowAsync();
    }
    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }


}