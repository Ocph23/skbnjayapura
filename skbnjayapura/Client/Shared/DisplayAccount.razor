@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject ILocalStorageService localStorageService
@inject AuthenticationStateProvider authStateProvider

<AuthorizeView>
    <Authorized>
        <li class="nav-item lh-1 me-3">
            <a>Hello, @context.User.Identity.Name!</a>
        </li>
        <li class="nav-item lh-1 me-3">
            <a href="" @onclick="Logout">Logout</a>
        </li>
    </Authorized>
    <NotAuthorized>
        <li class="nav-item lh-1 me-3">
            <a href="/account/login">Login</a>
        </li>
    </NotAuthorized>
</AuthorizeView>

<style>

    a, p {
        color: maroon
    }

        a:visited {
            color: #e30b0b;
        }
</style>


@code {
    string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var provider = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = provider.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
    }

    async Task Logout()
    {
        await localStorageService.RemoveItemAsync("token");
        await localStorageService.RemoveItemAsync("userName");
        await localStorageService.RemoveItemAsync("email");
        var result =  await authStateProvider.GetAuthenticationStateAsync();
        navManager.NavigateTo("/");
        StateHasChanged();
    }
}
